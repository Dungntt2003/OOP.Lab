********** LAB01************

8.1 
Questions:
- What happens if users choose “Cancel”?
- How to customize the options to users, e.g. only two options: “Yes” and “No”, OR “I do”
and “I don’t” (Suggestion: Use Javadocs or using Eclipse/Netbean IDE help).

Trả lời : 
1. Khi người dùng chọn Cancel thì sẽ xuất hiện Dialog thông báo "You've choosen : No".
Bởi JOptionPane.YES_OPTION luôn trả về giá trị 0, trong khi ấn vào No hay Cancel thì giá trị option sẽ là 1 hoặc 2 
nên option không bằng JOptionPane.YES_OPTION do đó hiện thị thông báo "You've choosen : No".

2. Code bài 8.1 sẽ chạy xuất hiện Dialog với 3 options : YES, NO, CANCEL. 
Cách tùy chỉnh options với người dùng , ví dụ chỉ hiển thị 2 options: YES, NO hay I do, I don't có thể sử dụng đoạn code sau :
 
    String[] options = new String[] {"Yes", "No"};
    int response = JOptionPane.showOptionDialog(null, "Message", "Title",
        JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE,
        null, options, options[0]);

Ở đoạn code trên Dialog sẽ xuất hiện 2 options là YES và NO. Nếu muốn thêm nhiều options, sẽ thêm
các options ở mảng options. Ví dụ :
     String[] options = new String[] {"Yes", "No", "Maybe", "Never"};
Khi đó Dialog sẽ xuất hiện 4 options : Yes, No, Maybe và Never

************* LAB02 ************

1. If you create a constructor method to build a DVD by title then create a constructor method to build
a DVD by category. Does JAVA allow you to do this?

    Giống như phương thức trong Java, Java cho phép tạo ra các constructor với các danh sách tham số khác nhau.
    Java phân biệt các constructor bởi tổng tham số truyền và kiểu của chúng và khi người lập trình không tạo constructor 
    thì java sẽ tạo ra constructor mặc định không có tham số 

2. Try to add a method addDigitalVideoDisc which allows to pass an arbitrary number of arguments for dvd. 
Compared to an array parameter. What do you prefer in this case?
    Truyền theo kiểu mảng : dễ kiểm soát mã nguồn, xử lý với mảng hơn, nhưng cần phải khởi tạo 1 mảng và truyền vào
    Truyền đối số tùy ý : được truyền số lượng tham số tùy ý, linh hoạt hơn  nhưng khó kiểm soát hơn do truyền tùy ý
    Em thích truyền đối số tùy ý hơn.

3. Question:
● Is JAVA a Pass by Value or a Pass by Reference programming language?
● After the call of swap(jungleDVD, cinderellaDVD) why does the title of these two
objects still remain?
● After the call of changeTitle(jungleDVD, cinderellaDVD.getTitle()) why is
the title of the JungleDVD changed?


- Java truyền tham số theo kiểu tham trị
- Ở hàm swap, hai tiêu đề của hai đối tượng vẫn giữ nguyên vì
    Hai tham số o1 và o2 được sao chép và truyền vào phương thức theo kiểu tham trị. Trong phương thức, biến tmp chỉ đơn giản là một biến tạm thời để lưu trữ giá trị của o1. 
    Khi gán o1 = o2 và o2 = tmp thì chỉ thay đổi giá trị của hai biến cục bộ trong phương thức swap, khi kết thúc phương thức thì giá trị của hai object vẫn không hề thay đổi
- Ở hàm changeTitle , tiêu đề của JungleDVD thay đổi vì 
    Khi gọi phương thức changeTitle sẽ tạo ra 1 tham chiếu dvd tới JungleDVD, sau đó dvd.setTitle(title) sẽ làm thay đổi tiêu đề của đối tượng mà dvd đang chiếu tới là JungleDVD nên làm thay đổi tiêu đề của đối tượng đó
    Sau đó dvd sẽ được tham chiếu tới 1 đối tượng khác có tiêu đề cũ của JungleDVD nhưng không ảnh hưởng đến đối tượng JungleDVD
    Khi thoát ra khỏi phương thức , đối tượng JungleDVD đã được thay đổi tiêu đề
---> Như vậy kết luận Java truyền tham số theo kiểu tham trị



*******************LAB03*********************
Alternatively, to compare items in the cart, instead of using the Comparator class I have
mentioned, you can use the Comparable interface1 and override the compareTo()method. You can
refer to the Java docs to see the information of this interface.
Suppose we are taking this Comparable interface approach.
- What class should implement the Comparable interface?
- In those classes, how should you implement the compareTo()method to reflect the ordering that
we want?
- Can we have two ordering rules of the item (by title then cost and by cost then title) if we use this
Comparable interface approach?
- Suppose the DVDs have a different ordering rule from the other media types, that is by title, then
decreasing length, then cost. How would you modify your code to allow this?

Ngoài ra, để so sánh các mặt hàng trong giỏ hàng, thay vì sử dụng lớp Comparator tôi có
đã đề cập, bạn có thể sử dụng giao diện So sánh1 và ghi đè phương thức so sánhTo(). Bạn có thể
tham khảo tài liệu Java để biết thông tin về giao diện này.
Giả sử chúng ta đang sử dụng phương pháp giao diện So sánh này.
- Lớp nào nên triển khai giao diện Comparable?
- Trong các lớp đó, bạn nên triển khai phương thức so sánhTo() như thế nào để phản ánh thứ tự
chúng tôi muốn?
- Liệu chúng ta có thể có hai quy tắc đặt hàng của mặt hàng (theo tiêu đề rồi giá và theo giá sau đó tiêu đề) nếu chúng ta sử dụng quy tắc này
Cách tiếp cận giao diện có thể so sánh?
- Giả sử các đĩa DVD có quy tắc sắp xếp khác với các loại phương tiện khác, đó là theo tiêu đề, thì
chiều dài giảm dần thì giá thành. Bạn sẽ sửa đổi mã của mình như thế nào để cho phép điều này?

- Lớp Media triển khai giao diện Comparable
- public int compareTo(Media o) {
		// TODO Auto-generated method stub
		if (this.title.compareTo(o.title) == 0) {
			return Float.compare(this.cost, o.cost);
		}
		return this.title.compareTo(o.title);
	}
- Không thể có 2 quy tắc để sort 
- Nếu DVD có quy tắc sắp xếp khác với các đối tượng khác. Thêm vào DVD như sau :
 	public int compareTo(Media o) {
		if (o instanceof CD) {
			CD cd = (CD) o;
			if (this.getTitle().compareTo(cd.getTitle())== 0) {
				if (this.length == cd.length) {
					return Float.compare(this.getCost(), o.getCost());
				}
				return Integer.compare(this.length, cd.length);
			}
			return this.getTitle().compareTo(cd.getTitle());
		}
		return super.compareTo(o);
	}
